#! /bin/bash
#
# Scans an Xcode target for PNGs and converts all to optimized JPEGs

# Debugging
# set -x

PKG_VERSION="${ENV_VERSION}"
YELLOW="\033[1;33m"
GREEN="\033[1;32m"
RED="\033[1;31m"
CLEAR="\033[0m"

################
###   MAIN   ###
################
main() {
  parse_args "$@"
  prep_cache_file

  # Scan $DIR_NAME for PNGs
  FILE_LIST=$(find $DIR_NAME -type f -name '*.png')

  SAVEIFS="$IFS"
  IFS="$(echo -en "\n\b")"

  for FILE in $FILE_LIST; do
    if grep -q "$FILE" "$CACHE_FILE" && [[ "$IGNORE_CACHE" == "0" ]]; then
      # Image already processed
      log note "Image already processed -"
      continue
    fi

    FILE_DIR="$(dirname $FILE)"
    FILE_NAME="$(basename $FILE .png)"

    if ! check_alpha "$FILE"; then
      echo "$FILE" >> "$CACHE_FILE"
      log note "Skipping due to transparency -"
      continue
    fi

    JPEG_FILE="$FILE_DIR/$FILE_NAME.jpeg"
    if [ -f "$JPEG_FILE" ] && [[ "$FORCE" == "0" ]]; then
      log error "JPEG file already exists -"
      exit 2
    fi

    log warning "Converting -"

    # Convert from PNG to JPEG
    sips -s format jpeg "$FILE" --out "$JPEG_FILE" &> /dev/null
    rm "$FILE"

    log note "Optimizing -"

    # Optimizes the JPEG image
    jpegoptim -q "$JPEG_FILE"

    if [[ "$UPDATE_CONTENTS" == "1" ]]; then
      update_assets_index "$FILE_DIR" "$FILE_NAME"
    fi
  done

  IFS=$SAVEIFS
}

###############################
###   PREPARES CACHE FILE   ###
###############################
prep_cache_file() {
  if [ -d "$BUILD_ROOT" ]; then
    local CACHE_DIR="$BUILD_ROOT"
  elif [ -d "$CACHE_ROOT" ]; then
    local CACHE_DIR="$CACHE_ROOT"
  else
    local CACHE_DIR="/usr/local/var/cache"
    mkdir -p "$(dirname $CACHE_DIR)"
  fi

  CACHE_FILE="$CACHE_DIR/image_optim_skipped.cache"

  if [ ! -f $CACHE_FILE ]; then
    touch "$CACHE_FILE"
  fi
}

#################################
###   UPDATES CONTENTS.JSON   ###
#################################
update_assets_index() {
  local FILE_DIR=$1
  local FILE_NAME=$2
  # Updates the directory's Contents.json if it exists
  CONTENTS_JSON="$FILE_DIR/Contents.json"
  if [ -f "$CONTENTS_JSON" ]; then
    ESCAPED_NAME=$(printf '%s\n' $FILE_NAME.png | sed 's:[][\\/.^$*]:\\&:g')
    NEW_CONTENTS=$(sed s:$ESCAPED_NAME:$FILE_NAME.jpeg: $CONTENTS_JSON)
    echo "$NEW_CONTENTS" > "$CONTENTS_JSON"
  fi
}

################################
###    CHECK ALPHA CHANNEL   ###
################################
check_alpha() {
  local PNG_FILE=$1
  # Check if image has transparency
  ALPHA_CHANNEL="$(convert "$PNG_FILE" -verbose info: | pcregrep -M 'Alpha:\s*min' | sed 's/.*(\(.*\))/\1/g' | sed -n 2p)"
  
  return $(bc -l <<< "$ALPHA_CHANNEL < $ALPHA_TOLERANCE")
}

###############
###   LOG   ###
###############
log() {
  local FILE_NAME=$(basename "$FILE")
  local LEVEL=$1
  local MSG=$2

  if [[ "$XCODE_LOG" == "1" ]]; then
    LEVEL="$LEVEL: "
  else 
    case $LEVEL in
    warning)
      local COLOR=$YELLOW
      ;;
    note)
      local COLOR=$GREEN
      ;;
    error)
      local COLOR=$RED
      ;;
    *)
      local COLOR=""
      ;;
    esac

    LEVEL=""
  fi
  
  echo -e "$COLOR$LEVEL$MSG $FILE_NAME$CLEAR"
}

########################
###   ARGS PARSING   ###
########################
parse_args() {
  DIR_NAME=()
  while [[ $# -gt 0 ]]
  do
  key="$1"

  case $key in
    -h|--help)
      display_help
      shift
      ;;
    -v|--version)
      echo "${PKG_VERSION}"
      exit 0
      ;;
    -t|--alpha-tolerance)
      ALPHA_TOLERANCE="$2"
      shift 2
      ;;
    -x|--no-xcode-log)
      XCODE_LOG=0
      shift 1
      ;;
    -c|--no-update-contents)
      UPDATE_CONTENTS=0
      shift 1
      ;;
    -i|--ignore-cache)
      IGNORE_CACHE=1
      shift 1
      ;;
    -f|--force)
      FORCE=1
      shift 1
      ;;
    *)    # unknown option
      DIR_NAME+=("$1") # save it in an array for later
      shift
      ;;
  esac
  done
  set -- "${DIR_NAME[@]}"

  DIR_NAME=${DIR_NAME-.}
  ALPHA_TOLERANCE=${ALPHA_TOLERANCE-0}
  XCODE_LOG=${XCODE_LOG-1}
  UPDATE_CONTENTS=${UPDATE_CONTENTS-1}
  IGNORE_CACHE=${IGNORE_CACHE-0}
  FORCE=${FORCE=0}
  
  if [[ $(bc -l <<< "$ALPHA_TOLERANCE < 0 || $ALPHA_TOLERANCE > 1") == "1" ]] ; then
    log error "Invalid alpha tolerance. Value must be 0...1"
    exit 1
  fi
}

#########################
# The command line help #
#########################
display_help() {
  CMD=$(basename -- $0)

  echo "Usage: 🏞  $CMD [options] {dir_name}" >&2
  echo
  echo "  dir_name                    The directory to be scanned for PNG images"
  echo
  echo "  -t, --alpha-tolerance       The tolerance allowed for the alpha channel. Value must be 0...1 (default: 0)"
  echo "  -x, --no-xcode-log          Do not format output for Xcode. When this is set, the output will include ANSI colors"
  echo "  -c, --no-update-contents    Do not update Content.json files"
  echo "  -i, --ignore-cache          Ignores the cached files"
  echo "  -f, --force                 Forces the convertion, overwriting existing files"
  echo "  -h, --help                  Outputs this help message"
  echo "  -v, --version               Outputs the version number"
  echo
  exit 0
}

main "$@"
